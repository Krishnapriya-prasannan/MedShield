{"ast":null,"code":"var _jsxFileName = \"/home/krishnapriya/MedShield/frontend/src/pages/MedicineVerificationPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { Container, Typography, Button } from \"@mui/material\";\nimport BarcodeScannerComponent from \"react-qr-barcode-scanner\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MedicineVerificationPage = () => {\n  _s();\n  const [barcode, setBarcode] = useState(\"\");\n  const [verificationResult, setVerificationResult] = useState(null);\n  const [scanning, setScanning] = useState(false);\n  const mockDatabase = {\n    \"123456789\": {\n      name: \"Paracetamol\",\n      brand: \"XYZ Pharma\",\n      status: \"Authentic\"\n    },\n    \"987654321\": {\n      name: \"Fake Drug\",\n      brand: \"Unknown\",\n      status: \"Counterfeit\"\n    }\n  };\n  const handleScan = (err, result) => {\n    if (result) {\n      setBarcode(result.text);\n      setScanning(false);\n\n      // Mock verification logic\n      const medicine = mockDatabase[result.text] || {\n        name: \"Unknown\",\n        status: \"Unverified\"\n      };\n      setVerificationResult(medicine);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"sm\",\n    style: {\n      marginTop: \"50px\",\n      textAlign: \"center\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h5\",\n      children: \"Medicine Verification\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), scanning ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(BarcodeScannerComponent, {\n        onUpdate: handleScan\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"secondary\",\n        onClick: () => setScanning(false),\n        children: \"Stop Scanning\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: () => setScanning(true),\n      children: \"Scan Medicine Barcode\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this), barcode && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: \"20px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        children: [\"Scanned Barcode: \", barcode]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this), verificationResult && /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        color: verificationResult.status === \"Authentic\" ? \"green\" : \"red\",\n        children: [\"Medicine: \", verificationResult.name, \" (\", verificationResult.status, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n_s(MedicineVerificationPage, \"ITm8a1JsGAR7Bn0it10OQn6T/nw=\");\n_c = MedicineVerificationPage;\nexport default MedicineVerificationPage;\nvar _c;\n$RefreshReg$(_c, \"MedicineVerificationPage\");","map":{"version":3,"names":["React","useState","Container","Typography","Button","BarcodeScannerComponent","jsxDEV","_jsxDEV","MedicineVerificationPage","_s","barcode","setBarcode","verificationResult","setVerificationResult","scanning","setScanning","mockDatabase","name","brand","status","handleScan","err","result","text","medicine","maxWidth","style","marginTop","textAlign","children","variant","fileName","_jsxFileName","lineNumber","columnNumber","onUpdate","color","onClick","_c","$RefreshReg$"],"sources":["/home/krishnapriya/MedShield/frontend/src/pages/MedicineVerificationPage.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { Container, Typography, Button } from \"@mui/material\";\nimport BarcodeScannerComponent from \"react-qr-barcode-scanner\";\n\nconst MedicineVerificationPage = () => {\n  const [barcode, setBarcode] = useState(\"\");\n  const [verificationResult, setVerificationResult] = useState(null);\n  const [scanning, setScanning] = useState(false);\n\n  const mockDatabase = {\n    \"123456789\": { name: \"Paracetamol\", brand: \"XYZ Pharma\", status: \"Authentic\" },\n    \"987654321\": { name: \"Fake Drug\", brand: \"Unknown\", status: \"Counterfeit\" },\n  };\n\n  const handleScan = (err, result) => {\n    if (result) {\n      setBarcode(result.text);\n      setScanning(false);\n\n      // Mock verification logic\n      const medicine = mockDatabase[result.text] || { name: \"Unknown\", status: \"Unverified\" };\n      setVerificationResult(medicine);\n    }\n  };\n\n  return (\n    <Container maxWidth=\"sm\" style={{ marginTop: \"50px\", textAlign: \"center\" }}>\n      <Typography variant=\"h5\">Medicine Verification</Typography>\n\n      {scanning ? (\n        <div>\n          <BarcodeScannerComponent onUpdate={handleScan} />\n          <Button variant=\"contained\" color=\"secondary\" onClick={() => setScanning(false)}>\n            Stop Scanning\n          </Button>\n        </div>\n      ) : (\n        <Button variant=\"contained\" color=\"primary\" onClick={() => setScanning(true)}>\n          Scan Medicine Barcode\n        </Button>\n      )}\n\n      {barcode && (\n        <div style={{ marginTop: \"20px\" }}>\n          <Typography variant=\"h6\">Scanned Barcode: {barcode}</Typography>\n          {verificationResult && (\n            <Typography variant=\"h6\" color={verificationResult.status === \"Authentic\" ? \"green\" : \"red\"}>\n              Medicine: {verificationResult.name} ({verificationResult.status})\n            </Typography>\n          )}\n        </div>\n      )}\n    </Container>\n  );\n};\n\nexport default MedicineVerificationPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}