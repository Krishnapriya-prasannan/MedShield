{"ast":null,"code":"var _jsxFileName = \"/home/krishnapriya/MedShield/frontend/src/pages/PharmacyAccessPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { Container, Typography, Button, TextField, Paper, Box } from \"@mui/material\";\nimport QrScanner from \"react-qr-scanner\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PharmacyAccessPage = () => {\n  _s();\n  const [userId, setUserId] = useState(\"\");\n  const [scanning, setScanning] = useState(false);\n  const handleScan = data => {\n    if (data) {\n      setUserId(data.text || data); // QR Scanner may return different formats\n      setScanning(false); // Stop scanning after successful scan\n    }\n  };\n  const handleError = err => {\n    console.error(\"QR Scanner Error:\", err);\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"sm\",\n    sx: {\n      mt: 4,\n      textAlign: \"center\"\n    },\n    children: /*#__PURE__*/_jsxDEV(Paper, {\n      elevation: 3,\n      sx: {\n        p: 3,\n        textAlign: \"center\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h5\",\n        gutterBottom: true,\n        children: \"Pharmacy Prescription Access\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        label: \"Enter or Scan User ID\",\n        variant: \"outlined\",\n        fullWidth: true,\n        value: userId,\n        onChange: e => setUserId(e.target.value),\n        sx: {\n          my: 2\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: \"flex\",\n          gap: 2,\n          justifyContent: \"center\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: () => setScanning(true),\n          children: \"Scan QR Code\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"success\",\n          disabled: !userId,\n          onClick: () => console.log(\"Retrieving prescription for User ID:\", userId),\n          children: \"Retrieve Prescription\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), scanning && /*#__PURE__*/_jsxDEV(Paper, {\n        elevation: 2,\n        sx: {\n          p: 2,\n          mt: 2\n        },\n        children: [/*#__PURE__*/_jsxDEV(QrScanner, {\n          delay: 300,\n          onScan: handleScan,\n          onError: handleError,\n          style: {\n            width: \"100%\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"secondary\",\n          sx: {\n            mt: 2\n          },\n          onClick: () => setScanning(false),\n          children: \"Stop Scanning\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n};\n_s(PharmacyAccessPage, \"inIP8/tsDefl0W7giSoD1oRqHag=\");\n_c = PharmacyAccessPage;\nexport default PharmacyAccessPage;\nvar _c;\n$RefreshReg$(_c, \"PharmacyAccessPage\");","map":{"version":3,"names":["React","useState","Container","Typography","Button","TextField","Paper","Box","QrScanner","jsxDEV","_jsxDEV","PharmacyAccessPage","_s","userId","setUserId","scanning","setScanning","handleScan","data","text","handleError","err","console","error","maxWidth","sx","mt","textAlign","children","elevation","p","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","label","fullWidth","value","onChange","e","target","my","display","gap","justifyContent","color","onClick","disabled","log","delay","onScan","onError","style","width","_c","$RefreshReg$"],"sources":["/home/krishnapriya/MedShield/frontend/src/pages/PharmacyAccessPage.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { Container, Typography, Button, TextField, Paper, Box } from \"@mui/material\";\nimport QrScanner from \"react-qr-scanner\";\n\nconst PharmacyAccessPage = () => {\n  const [userId, setUserId] = useState(\"\");\n  const [scanning, setScanning] = useState(false);\n\n  const handleScan = (data) => {\n    if (data) {\n      setUserId(data.text || data); // QR Scanner may return different formats\n      setScanning(false); // Stop scanning after successful scan\n    }\n  };\n\n  const handleError = (err) => {\n    console.error(\"QR Scanner Error:\", err);\n  };\n\n  return (\n    <Container maxWidth=\"sm\" sx={{ mt: 4, textAlign: \"center\" }}>\n      <Paper elevation={3} sx={{ p: 3, textAlign: \"center\" }}>\n        <Typography variant=\"h5\" gutterBottom>\n          Pharmacy Prescription Access\n        </Typography>\n\n        {/* Input Field */}\n        <TextField\n          label=\"Enter or Scan User ID\"\n          variant=\"outlined\"\n          fullWidth\n          value={userId}\n          onChange={(e) => setUserId(e.target.value)}\n          sx={{ my: 2 }}\n        />\n\n        {/* Buttons Section */}\n        <Box sx={{ display: \"flex\", gap: 2, justifyContent: \"center\" }}>\n          <Button variant=\"contained\" color=\"primary\" onClick={() => setScanning(true)}>\n            Scan QR Code\n          </Button>\n          <Button\n            variant=\"contained\"\n            color=\"success\"\n            disabled={!userId}\n            onClick={() => console.log(\"Retrieving prescription for User ID:\", userId)}\n          >\n            Retrieve Prescription\n          </Button>\n        </Box>\n\n        {/* QR Scanner Section */}\n        {scanning && (\n          <Paper elevation={2} sx={{ p: 2, mt: 2 }}>\n            <QrScanner delay={300} onScan={handleScan} onError={handleError} style={{ width: \"100%\" }} />\n            <Button\n              variant=\"contained\"\n              color=\"secondary\"\n              sx={{ mt: 2 }}\n              onClick={() => setScanning(false)}\n            >\n              Stop Scanning\n            </Button>\n          </Paper>\n        )}\n      </Paper>\n    </Container>\n  );\n};\n\nexport default PharmacyAccessPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}