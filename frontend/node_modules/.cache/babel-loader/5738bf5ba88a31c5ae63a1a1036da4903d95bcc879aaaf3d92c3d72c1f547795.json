{"ast":null,"code":"var _jsxFileName = \"/home/krishnapriya/MedShield/frontend/src/pages/MyPrescriptionPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useContext } from \"react\";\nimport axios from \"axios\";\nimport { Container, Typography, Card, CardContent, Grid, Divider } from \"@mui/material\";\nimport { AuthContext } from \"../context/AuthContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MyPrescriptionPage = () => {\n  _s();\n  const {\n    user\n  } = useContext(AuthContext);\n  const [prescriptions, setPrescriptions] = useState([]);\n  useEffect(() => {\n    const fetchPrescriptions = async () => {\n      try {\n        const response = await axios.get(`http://localhost:5000/api/prescriptions/${user.email}`);\n        setPrescriptions(response.data);\n      } catch (error) {\n        console.error(\"Error fetching prescriptions:\", error);\n      }\n    };\n    fetchPrescriptions();\n  }, [user.email]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"md\",\n    sx: {\n      mt: 4\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h5\",\n      gutterBottom: true,\n      children: \"My Prescriptions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Divider, {\n      sx: {\n        mb: 2\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 2,\n      children: prescriptions.length > 0 ? prescriptions.map(prescription => {\n        const isExpired = new Date(prescription.expiryDate) < new Date();\n        return /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            sx: {\n              background: isExpired ? \"#f5f5f5\" : \"#fff\",\n              opacity: isExpired ? 0.6 : 1\n            },\n            children: /*#__PURE__*/_jsxDEV(CardContent, {\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h6\",\n                children: prescription.medicineName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 38,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body2\",\n                children: [\"Dosage: \", prescription.dosage]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 39,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body2\",\n                children: [\"Date Issued: \", new Date(prescription.issuedDate).toLocaleDateString()]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 40,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body2\",\n                color: isExpired ? \"error\" : \"textPrimary\",\n                children: isExpired ? \"Expired\" : \"Valid\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 41,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Divider, {\n                sx: {\n                  my: 1\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 44,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body2\",\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Prescribed by:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 46,\n                  columnNumber: 23\n                }, this), \" \", prescription.doctorName, \" (\", prescription.doctorContact, \")\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 45,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 37,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 17\n          }, this)\n        }, prescription._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 15\n        }, this);\n      }) : /*#__PURE__*/_jsxDEV(Typography, {\n        children: \"No prescriptions found.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n_s(MyPrescriptionPage, \"vXaUvwTH7/ycHlgtBe2dD6oYJB8=\");\n_c = MyPrescriptionPage;\nexport default MyPrescriptionPage;\nvar _c;\n$RefreshReg$(_c, \"MyPrescriptionPage\");","map":{"version":3,"names":["React","useEffect","useState","useContext","axios","Container","Typography","Card","CardContent","Grid","Divider","AuthContext","jsxDEV","_jsxDEV","MyPrescriptionPage","_s","user","prescriptions","setPrescriptions","fetchPrescriptions","response","get","email","data","error","console","maxWidth","sx","mt","children","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","mb","container","spacing","length","map","prescription","isExpired","Date","expiryDate","item","xs","background","opacity","medicineName","dosage","issuedDate","toLocaleDateString","color","my","doctorName","doctorContact","_id","_c","$RefreshReg$"],"sources":["/home/krishnapriya/MedShield/frontend/src/pages/MyPrescriptionPage.js"],"sourcesContent":["import React, { useEffect, useState, useContext } from \"react\";\nimport axios from \"axios\";\nimport { Container, Typography, Card, CardContent, Grid, Divider } from \"@mui/material\";\nimport { AuthContext } from \"../context/AuthContext\";\n\nconst MyPrescriptionPage = () => {\n  const { user } = useContext(AuthContext);\n  const [prescriptions, setPrescriptions] = useState([]);\n\n  useEffect(() => {\n    const fetchPrescriptions = async () => {\n      try {\n        const response = await axios.get(`http://localhost:5000/api/prescriptions/${user.email}`);\n        setPrescriptions(response.data);\n      } catch (error) {\n        console.error(\"Error fetching prescriptions:\", error);\n      }\n    };\n\n    fetchPrescriptions();\n  }, [user.email]);\n\n  return (\n    <Container maxWidth=\"md\" sx={{ mt: 4 }}>\n      <Typography variant=\"h5\" gutterBottom>\n        My Prescriptions\n      </Typography>\n      <Divider sx={{ mb: 2 }} />\n\n      <Grid container spacing={2}>\n        {prescriptions.length > 0 ? (\n          prescriptions.map((prescription) => {\n            const isExpired = new Date(prescription.expiryDate) < new Date();\n            return (\n              <Grid item xs={12} key={prescription._id}>\n                <Card sx={{ background: isExpired ? \"#f5f5f5\" : \"#fff\", opacity: isExpired ? 0.6 : 1 }}>\n                  <CardContent>\n                    <Typography variant=\"h6\">{prescription.medicineName}</Typography>\n                    <Typography variant=\"body2\">Dosage: {prescription.dosage}</Typography>\n                    <Typography variant=\"body2\">Date Issued: {new Date(prescription.issuedDate).toLocaleDateString()}</Typography>\n                    <Typography variant=\"body2\" color={isExpired ? \"error\" : \"textPrimary\"}>\n                      {isExpired ? \"Expired\" : \"Valid\"}\n                    </Typography>\n                    <Divider sx={{ my: 1 }} />\n                    <Typography variant=\"body2\">\n                      <strong>Prescribed by:</strong> {prescription.doctorName} ({prescription.doctorContact})\n                    </Typography>\n                  </CardContent>\n                </Card>\n              </Grid>\n            );\n          })\n        ) : (\n          <Typography>No prescriptions found.</Typography>\n        )}\n      </Grid>\n    </Container>\n  );\n};\n\nexport default MyPrescriptionPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}